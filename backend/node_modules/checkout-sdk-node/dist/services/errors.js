"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.determineError = exports.ValueError = exports.ValidationError = exports.UrlAlreadyRegistered = exports.TooManyRequestsError = exports.NotFoundError = exports.ErrorWithBody = exports.BadGateway = exports.AuthenticationError = exports.ApiTimeout = exports.ApiError = exports.ActionNotAllowed = void 0;
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/* eslint-disable camelcase */
/* eslint-disable max-classes-per-file */
/**
 * Error raised for pre-api value validation
 *
 * @export
 * @class ApiTimeout
 * @extends {Error}
 */
class ApiTimeout extends Error {
  constructor() {
    super('ApiTimeout');
    Object.setPrototypeOf(this, new.target.prototype);
    this.http_code = 408;
    this.name = 'ApiTimeout';
  }
}

/**
 * AuthenticationError
 *
 * @export
 * @class AuthenticationError
 * @extends {Error}
 */
exports.ApiTimeout = ApiTimeout;
class AuthenticationError extends Error {
  constructor(message) {
    super(message);
    Object.setPrototypeOf(this, new.target.prototype);
    this.http_code = 401;
    this.name = 'AuthenticationError';
  }
}

/**
 * ActionNotAllowed
 *
 * @export
 * @class ActionNotAllowed
 * @extends {Error}
 */
exports.AuthenticationError = AuthenticationError;
class ActionNotAllowed extends Error {
  constructor(message = 'ActionNotAllowed') {
    super(message);
    Object.setPrototypeOf(this, new.target.prototype);
    this.http_code = 403;
    this.name = 'ActionNotAllowed';
  }
}

/**
 * UrlAlreadyRegistered
 *
 * @export
 * @class UrlAlreadyRegistered
 * @extends {Error}
 */
exports.ActionNotAllowed = ActionNotAllowed;
class UrlAlreadyRegistered extends Error {
  constructor(error, message = 'UrlAlreadyRegistered') {
    super(message);
    Object.setPrototypeOf(this, new.target.prototype);
    this.http_code = 409;
    this.name = 'UrlAlreadyRegistered';
    this.body = error;
  }
}

/**
 * NotFoundError
 *
 * @export
 * @class NotFoundError
 * @extends {Error}
 */
exports.UrlAlreadyRegistered = UrlAlreadyRegistered;
class NotFoundError extends Error {
  constructor(message = 'NotFoundError') {
    super(message);
    Object.setPrototypeOf(this, new.target.prototype);
    this.http_code = 404;
    this.name = 'NotFoundError';
  }
}

/**
 * ValidationError
 *
 * @export
 * @class ValidationError
 * @extends {Error}
 */
exports.NotFoundError = NotFoundError;
class ErrorWithBody extends Error {
  constructor(http_code, error, message) {
    super(message);
    Object.setPrototypeOf(this, new.target.prototype);
    this.name = message;
    this.http_code = http_code;
    this.body = error;
  }
}

/**
 * ValidationError
 *
 * @export
 * @class ValidationError
 * @extends {ErrorWithBody}
 */
exports.ErrorWithBody = ErrorWithBody;
class ValidationError extends ErrorWithBody {
  constructor(error, message = 'ValidationError') {
    super(422, error, message);
  }
}

/**
 * TooManyRequestsError
 *
 * @export
 * @class TooManyRequestsError
 * @extends {ErrorWithBody}
 */
exports.ValidationError = ValidationError;
class TooManyRequestsError extends ErrorWithBody {
  constructor(error, message = 'TooManyRequestsError') {
    super(429, error, message);
  }
}

/**
 * BadGateway
 *
 * @export
 * @class BadGateway
 * @extends {Error}
 */
exports.TooManyRequestsError = TooManyRequestsError;
class BadGateway extends Error {
  constructor() {
    super('Bad gateway');
    Object.setPrototypeOf(this, new.target.prototype);
    this.name = 'Bad gateway';
    this.http_code = 502;
  }
}

/**
 * ApiError
 *
 * @export
 * @class HttpError
 * @extends {Error}
 */
exports.BadGateway = BadGateway;
class ApiError extends Error {
  constructor(http_code, message) {
    super('API Error');
    Object.setPrototypeOf(this, new.target.prototype);
    this.name = 'API Error';
    this.http_code = http_code;
    this.body = message;
  }
}

/**
 * ValueError
 *
 * @export
 * @class ValueError
 * @extends {Error}
 */
exports.ApiError = ApiError;
class ValueError extends Error {
  constructor(message) {
    super(message);
    Object.setPrototypeOf(this, new.target.prototype);
    this.name = 'ValueError';
    this.body = message;
  }
}
exports.ValueError = ValueError;
const determineError = exports.determineError = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (err) {
    // Fot time outs
    if (err.type === 'request-timeout') {
      return new ApiTimeout();
    }
    if (err instanceof ValueError) {
      throw err;
    }

    // For 'no body' response, replace with empty object
    let errorJSON = err.json !== undefined ? err.json : {};
    if (Object.keys(errorJSON).length > 0 && errorJSON.code === 'ECONNABORTED') {
      return new ApiTimeout();
    }
    if (Object.keys(errorJSON).length === 0 && err.message) {
      errorJSON = err.message;
    }
    switch (err.status) {
      case 401:
        return new AuthenticationError();
      case 404:
        return new NotFoundError();
      case 403:
        return new ActionNotAllowed();
      case 409:
        return new UrlAlreadyRegistered(yield errorJSON);
      case 422:
        return new ValidationError(yield errorJSON);
      case 429:
        return new TooManyRequestsError(yield errorJSON);
      case 502:
        return new BadGateway();
      default:
        {
          return new ApiError(err.status, yield errorJSON);
        }
    }
  });
  return function determineError(_x) {
    return _ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=errors.js.map