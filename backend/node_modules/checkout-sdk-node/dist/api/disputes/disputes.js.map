{"version":3,"file":"disputes.js","names":["_errors","require","_http","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","Disputes","constructor","config","get","body","_this","url","host","queryString","Object","keys","map","key","join","response","httpClient","sk","json","err","error","determineError","getDetails","disputeId","_this2","accept","_this3","post","provideEvidence","_this4","put","getEvidence","_this5","submit","_this6","getCompiledSubmittedEvidence","_this7","getDisputeSchemeFiles","_this8","exports","default"],"sources":["../../../src/api/disputes/disputes.js"],"sourcesContent":["import { determineError } from '../../services/errors';\r\nimport { get, post, put } from '../../services/http';\r\n\r\n/**\r\n * Class dealing with the /disputes endpoint\r\n *\r\n * @export\r\n * @class Disputes\r\n */\r\nexport default class Disputes {\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n\r\n    /**\r\n     * Returns a list of all disputes against your business. The results will be returned\r\n     * in reverse chronological order, showing the last modified dispute (for example,\r\n     * where you've recently added a piece of evidence) first. You can use the optional\r\n     * parameters below to skip or limit results.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {Object} body Disputes params.\r\n     * @return {Promise<Object>} A promise to the disputes response.\r\n     */\r\n    async get(body) {\r\n        try {\r\n            let url = `${this.config.host}/disputes`;\r\n\r\n            if (body) {\r\n                const queryString = Object.keys(body)\r\n                    .map((key) => `${key}=${body[key]}`)\r\n                    .join('&');\r\n                url += `?${queryString}`;\r\n            }\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                url,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all the details of a dispute using the dispute identifier.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @return {Promise<Object>} A promise to the dispute response.\r\n     */\r\n    async getDetails(disputeId) {\r\n        try {\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                `${this.config.host}/disputes/${disputeId}`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all the details of a dispute using the dispute identifier.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @return {Promise<Object>} A promise to the dispute response.\r\n     */\r\n    async accept(disputeId) {\r\n        try {\r\n            const response = await post(\r\n                this.config.httpClient,\r\n                `${this.config.host}/disputes/${disputeId}/accept`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds supporting evidence to a dispute. Before using this endpoint, you first need\r\n     * to upload your files using the file uploader. You will receive a file id\r\n     * (prefixed by file_) which you can then use in your request. Note that this only\r\n     * attaches the evidence to the dispute, it does not send it to us.\r\n     * Once ready, you will need to submit it.\r\n     *\r\n     * You must provide at least one evidence type in the body of your request.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @param {Object} body Evidence\r\n     * @return {Promise<Object>} A promise to the dispute response.\r\n     */\r\n    async provideEvidence(disputeId, body) {\r\n        try {\r\n            const response = await put(\r\n                this.config.httpClient,\r\n                `${this.config.host}/disputes/${disputeId}/evidence`,\r\n                this.config,\r\n                this.config.sk,\r\n                body\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves a list of the evidence submitted in response to a specific dispute.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @return {Promise<Object>} A promise to the dispute response.\r\n     */\r\n    async getEvidence(disputeId) {\r\n        try {\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                `${this.config.host}/disputes/${disputeId}/evidence`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * With this final request, you can submit the evidence that you have previously\r\n     * provided. Make sure you have provided all the relevant information before using\r\n     * this request. You will not be able to amend your evidence once you have submitted it.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @return {Promise<Object>} A promise to the dispute response.\r\n     */\r\n    async submit(disputeId) {\r\n        try {\r\n            const response = await post(\r\n                this.config.httpClient,\r\n                `${this.config.host}/disputes/${disputeId}/evidence`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the unique identifier of the PDF file containing all the evidence submitted to represent the dispute case.\r\n     * To retrieve the file's download link, call the GET /files/{file_id} endpoint with the returned file ID.\r\n     * Evidence submitted before February 2024 cannot be retrieved using this endpoint.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @return {Promise<Object>} A promise to the compiled submitted evidence response.\r\n     */\r\n    async getCompiledSubmittedEvidence(disputeId) {\r\n        try {\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                `${this.config.host}/disputes/${disputeId}/evidence/submitted`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all of the scheme files of a dispute using the dispute identifier.\r\n     * Currently available only for VISA disputes.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @return {Promise<Object>} A promise to the dispute scheme files response.\r\n     */\r\n    async getDisputeSchemeFiles(disputeId) {\r\n        try {\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                `${this.config.host}/disputes/${disputeId}/schemefiles`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]}