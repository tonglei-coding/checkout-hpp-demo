"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _errors = require("../../services/errors");
var _http = require("../../services/http");
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Class dealing with the /disputes endpoint
 *
 * @export
 * @class Disputes
 */
class Disputes {
  constructor(config) {
    this.config = config;
  }

  /**
   * Returns a list of all disputes against your business. The results will be returned
   * in reverse chronological order, showing the last modified dispute (for example,
   * where you've recently added a piece of evidence) first. You can use the optional
   * parameters below to skip or limit results.
   *
   * @memberof Disputes
   * @param {Object} body Disputes params.
   * @return {Promise<Object>} A promise to the disputes response.
   */
  get(body) {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        let url = `${_this.config.host}/disputes`;
        if (body) {
          const queryString = Object.keys(body).map(key => `${key}=${body[key]}`).join('&');
          url += `?${queryString}`;
        }
        const response = yield (0, _http.get)(_this.config.httpClient, url, _this.config, _this.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Returns all the details of a dispute using the dispute identifier.
   *
   * @memberof Disputes
   * @param {string} disputeId Dispute id.
   * @return {Promise<Object>} A promise to the dispute response.
   */
  getDetails(disputeId) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this2.config.httpClient, `${_this2.config.host}/disputes/${disputeId}`, _this2.config, _this2.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Returns all the details of a dispute using the dispute identifier.
   *
   * @memberof Disputes
   * @param {string} disputeId Dispute id.
   * @return {Promise<Object>} A promise to the dispute response.
   */
  accept(disputeId) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this3.config.httpClient, `${_this3.config.host}/disputes/${disputeId}/accept`, _this3.config, _this3.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Adds supporting evidence to a dispute. Before using this endpoint, you first need
   * to upload your files using the file uploader. You will receive a file id
   * (prefixed by file_) which you can then use in your request. Note that this only
   * attaches the evidence to the dispute, it does not send it to us.
   * Once ready, you will need to submit it.
   *
   * You must provide at least one evidence type in the body of your request.
   *
   * @memberof Disputes
   * @param {string} disputeId Dispute id.
   * @param {Object} body Evidence
   * @return {Promise<Object>} A promise to the dispute response.
   */
  provideEvidence(disputeId, body) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.put)(_this4.config.httpClient, `${_this4.config.host}/disputes/${disputeId}/evidence`, _this4.config, _this4.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Retrieves a list of the evidence submitted in response to a specific dispute.
   *
   * @memberof Disputes
   * @param {string} disputeId Dispute id.
   * @return {Promise<Object>} A promise to the dispute response.
   */
  getEvidence(disputeId) {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this5.config.httpClient, `${_this5.config.host}/disputes/${disputeId}/evidence`, _this5.config, _this5.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * With this final request, you can submit the evidence that you have previously
   * provided. Make sure you have provided all the relevant information before using
   * this request. You will not be able to amend your evidence once you have submitted it.
   *
   * @memberof Disputes
   * @param {string} disputeId Dispute id.
   * @return {Promise<Object>} A promise to the dispute response.
   */
  submit(disputeId) {
    var _this6 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this6.config.httpClient, `${_this6.config.host}/disputes/${disputeId}/evidence`, _this6.config, _this6.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Retrieves the unique identifier of the PDF file containing all the evidence submitted to represent the dispute case.
   * To retrieve the file's download link, call the GET /files/{file_id} endpoint with the returned file ID.
   * Evidence submitted before February 2024 cannot be retrieved using this endpoint.
   *
   * @memberof Disputes
   * @param {string} disputeId Dispute id.
   * @return {Promise<Object>} A promise to the compiled submitted evidence response.
   */
  getCompiledSubmittedEvidence(disputeId) {
    var _this7 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this7.config.httpClient, `${_this7.config.host}/disputes/${disputeId}/evidence/submitted`, _this7.config, _this7.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Returns all of the scheme files of a dispute using the dispute identifier.
   * Currently available only for VISA disputes.
   *
   * @memberof Disputes
   * @param {string} disputeId Dispute id.
   * @return {Promise<Object>} A promise to the dispute scheme files response.
   */
  getDisputeSchemeFiles(disputeId) {
    var _this8 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this8.config.httpClient, `${_this8.config.host}/disputes/${disputeId}/schemefiles`, _this8.config, _this8.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }
}
exports.default = Disputes;
//# sourceMappingURL=disputes.js.map