"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _errors = require("../../services/errors");
var _http = require("../../services/http");
var _validation = require("../../services/validation");
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /* eslint-disable no-underscore-dangle */
const addUtilityParams = json => {
  let requiresRedirect = false;
  if (json.destination) {
    requiresRedirect = false;
  } else {
    const isPending = json.status === 'Pending';
    const hasRedirectUrl = json._links.redirect !== undefined;
    requiresRedirect = isPending && hasRedirectUrl;
  }

  // If the redirection URL exists add it to the response body as 'redirectLink'
  let redirectLink;
  if (requiresRedirect && json._links.redirect) {
    redirectLink = json._links.redirect.href;
  }
  return _objectSpread(_objectSpread({}, json), {}, {
    requiresRedirect,
    redirectLink
  });
};

/**
 * Class dealing with the /payments endpoint
 *
 * @export
 * @class Payments
 */
class Payments {
  constructor(config) {
    this.config = config;
  }

  /**
   * Sends payment or a payout requests.
   *
   * @memberof Payments
   * @param {Object} body Payment Request body.
   * @param {string} [idempotencyKey] Idempotency Key.
   * @return {Promise<Object>} A promise to payment response.
   */
  request(body, idempotencyKey) {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        (0, _validation.setSourceOrDestinationType)(body);
        (0, _validation.validatePayment)(body);
        const response = yield (0, _http.post)(_this.config.httpClient, `${_this.config.host}/payments`, _this.config, _this.config.sk, body, idempotencyKey);
        return addUtilityParams(yield response.json);
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Returns a list of your business' payments that match the specified reference.
   *
   * @memberof Payments
   * @param {Object} body /^(pay|sid)_(\w{26})$/ The payment or payment session identifier.
   * @return {Promise<Object>} A promise to the get payment response.
   */
  getPaymentList(body) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      let url = `${_this2.config.host}/payments`;
      if (body) {
        const queryString = Object.keys(body).map(key => `${key}=${body[key]}`).join('&');
        url += `?${queryString}`;
      }
      try {
        const response = yield (0, _http.get)(_this2.config.httpClient, url, _this2.config, _this2.config.sk);
        return response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Returns the details of the payment with the specified identifier string.
   *
   * @memberof Payments
   * @param {string} id /^(pay|sid)_(\w{26})$/ The payment or payment session identifier.
   * @return {Promise<Object>} A promise to the get payment response.
   */
  get(id) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this3.config.httpClient, `${_this3.config.host}/payments/${id}`, _this3.config, _this3.config.sk);
        return response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Returns all the actions associated with a payment ordered by processing date in
   * descending order (latest first).
   *
   * @memberof Payments
   * @param {string} id /^(pay)_(\w{26})$/ The payment identifier.
   * @return {Promise<Object>} A promise to the getActions response.
   */
  getActions(id) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this4.config.httpClient, `${_this4.config.host}/payments/${id}/actions`, _this4.config, _this4.config.sk);
        return response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Request an incremental authorization to increase the authorization amount or extend
   * the authorization's validity period.
   *
   * @memberof Payments
   * @param {string} id /^(pay)_(\w{26})$/ The payment identifier.
   * @param {Object} body Payment Request body.
   * @return {Promise<Object>} A promise to the getActions response.
   */
  increment(id, body, idempotencyKey) {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this5.config.httpClient, `${_this5.config.host}/payments/${id}/authorizations`, _this5.config, _this5.config.sk, body, idempotencyKey);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Captures a payment if supported by the payment method.
   *
   * @memberof Payments
   * @param {string} paymentId /^(pay)_(\w{26})$/ The payment or payment session identifier.
   * @param {Object} [body] Capture request body.
   * @param {string} [idempotencyKey] Idempotency Key.
   * @return {Promise<Object>} A promise to the capture response.
   */
  capture(paymentId, body, idempotencyKey) {
    var _this6 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this6.config.httpClient, `${_this6.config.host}/payments/${paymentId}/captures`, _this6.config, _this6.config.sk, body, idempotencyKey);
        return response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Refunds a payment if supported by the payment method.
   *
   * @memberof Payments
   * @param {string} paymentId /^(pay)_(\w{26})$/ The payment or payment session identifier.
   * @param {Object} [body] Refund request body.
   * @param {string} [idempotencyKey] Idempotency Key.
   * @return {Promise<Object>} A promise to the refund response.
   */
  refund(paymentId, body, idempotencyKey) {
    var _this7 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this7.config.httpClient, `${_this7.config.host}/payments/${paymentId}/refunds`, _this7.config, _this7.config.sk, body, idempotencyKey);
        return response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Voids a payment if supported by the payment method.
   *
   * @memberof Payments
   * @param {string} paymentId /^(pay)_(\w{26})$/ The payment or payment session identifier.
   * @param {Object} [body] Void request body.
   * @param {string} [idempotencyKey] Idempotency Key.
   * @return {Promise<Object>} A promise to the void response.
   */
  void(paymentId, body, idempotencyKey) {
    var _this8 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this8.config.httpClient, `${_this8.config.host}/payments/${paymentId}/voids`, _this8.config, _this8.config.sk, body, idempotencyKey);
        return response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }
}
exports.default = Payments;
//# sourceMappingURL=payments.js.map