"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _errors = require("../../services/errors");
var _http = require("../../services/http");
var _config = require("../../config");
var _formData = _interopRequireDefault(require("form-data"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Class dealing with the platforms api
 *
 * @export
 * @class Platforms
 */
class Platforms {
  constructor(config) {
    this.config = config;
  }

  /**
   * Our Platforms solution provides an easy way to upload identity documentation required for full due diligence.
   *
   * @memberof Platforms
   * @param {string} purpose The purpose of the file upload.
   * @param {Object} path The local path of the file to upload, and its type.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  uploadFile(purpose, path) {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        const form = new _formData.default();
        form.append('path', path);
        form.append('purpose', purpose);
        const url = `${_this.config.host.includes('sandbox') ? _config.PLATFORMS_FILES_SANDBOX_URL : _config.PLATFORMS_FILES_LIVE_URL}`;
        const response = yield (0, _http.post)(_this.config.httpClient, url, _objectSpread(_objectSpread({}, _this.config), {}, {
          formData: true
        }), _this.config.sk, form);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Onboard a sub-entity so they can start receiving payments. Once created,
   * Checkout.com will run due diligence checks. If the checks are successful,
   * we'll enable payment capabilities for that sub-entity and they will start
   * receiving payments.
   *
   * @memberof Platforms
   * @param {Object} body Platforms request body.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  onboardSubEntity(body) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this2.config.httpClient, `${_this2.config.host}/accounts/entities`, _this2.config, _this2.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Our Platforms solution provides an easy way to upload documentation required for full due diligence.
   * Use this endpoint to generate a file upload link, which you can then upload a file to using a data-binary type request.
   * See the https://www.checkout.com/docs/platforms/onboard-sub-entities/full-sub-entity-onboarding/upload-a-file#Upload_a_file for more information.
   *
   * @memberof Platforms
   * @param {string} entityId The ID of the sub-entity.
   * @param {Object} body The body
   * @param {string} body.purpose The purpose of the file upload.
   * @returns {Promise<Object>}
   */
  uploadAFile(entityId, body) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this3.config.httpClient, `${_this3.config.host}/accounts/entities/${entityId}/files`, _this3.config, _this3.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Retrieve information about a previously uploaded file.
   *
   * @memberof Platforms
   * @param {string} entityId The ID of the sub-entity.
   * @param {string} fileId The ID of the file. The value is always prefixed with file_.
   * @returns {Promise<Object>}
   */
  retrieveAFile(entityId, fileId) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this4.config.httpClient, `${_this4.config.host}/accounts/entities/${entityId}/files/${fileId}`, _this4.config, _this4.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Retrieve information on all users of a sub-entity that has been invited through Hosted Onboarding
   * (https://www.checkout.com/docs/platforms/onboard-sub-entities/onboard-with-hosted-onboarding). Only
   * one user can be invited to onboard the sub-entity through Hosted Onboarding.
   *
   * To enable the Hosted Onboarding feature, contact your Customer Success Manager.
   *
   * @memberof Platforms
   * @param {string} entityId Sub-entity id.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  getSubEntityMembers(entityId) {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this5.config.httpClient, `${_this5.config.host}/accounts/entities/${entityId}/members`, _this5.config, _this5.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Resend an invitation to the user of a sub-entity. The user will receive another email to continue their
   * Hosted Onboarding (https://www.checkout.com/docs/platforms/onboard-sub-entities/onboard-with-hosted-onboarding)
   * application. An invitation can only be resent to the user originally registered to the
   * sub-entity.
   *
   * To enable the Hosted Onboarding feature, contact your Customer Success Manager.
   *
   * @memberof Platforms
   * @param {string} entityId The ID of the sub-entity.
   * @param {string} userId The ID of the invited user.
   * @param {Object} body The body (Reinvite sub-entity member)
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  reinviteSubEntityMember(entityId, userId, body) {
    var _this6 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.put)(_this6.config.httpClient, `${_this6.config.host}/accounts/entities/${entityId}/members/${userId}`, _this6.config, _this6.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Use this endpoint to retrieve a sub-entity and its full details.
   *
   * @memberof Platforms
   * @param {string} id Sub-entity id.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  getSubEntityDetails(id) {
    var _this7 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this7.config.httpClient, `${_this7.config.host}/accounts/entities/${id}`, _this7.config, _this7.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * You can update all fields under the Contact details, Profile, and Company objects.
   * You can also add identification information to complete due diligence requirements.
   *
   * @memberof Platforms
   * @param {string} id Sub-entity id.
   * @param {Object} body Platforms request body.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  updateSubEntityDetails(id, body) {
    var _this8 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.put)(_this8.config.httpClient, `${_this8.config.host}/accounts/entities/${id}`, _this8.config, _this8.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Retrieve the details of a specific payment instrument used for sub-entity payouts.
   *
   * @memberof Platforms
   * @param {string} entityId The sub-entity's ID.
   * @param {string} id The payment instrument's ID.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  getPaymentInstrumentDetails(entityId, id) {
    var _this9 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this9.config.httpClient, `${_this9.config.host}/accounts/entities/${entityId}/payment-instruments/${id}`, _this9.config, _this9.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Update a session by providing information about the environment.
   *
   * @memberof Platforms
   * @param {string} entityId Sub-entity id.
   * @param {string} id Payment instrument's id.
   * @param {Object} body Platforms request body.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  updatePaymentInstrumentDetails(entityId, id, body) {
    var _this10 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.patch)(_this10.config.httpClient, `${_this10.config.host}/accounts/entities/${entityId}/payment-instruments/${id}`, _this10.config, _this10.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Update a session by providing information about the environment.
   *
   * @deprecated Use the payment instrument operations at /payment-instruments instead.
   * @memberof Platforms
   * @param {string} id Sub-entity id.
   * @param {Object} body Platforms request body.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  createPaymentInstrument(id, body) {
    var _this11 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this11.config.httpClient, `${_this11.config.host}/accounts/entities/${id}/instruments`, _this11.config, _this11.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Update a session by providing information about the environment.
   *
   * @memberof Platforms
   * @param {string} id Sub-entity id.
   * @param {Object} body Platforms request body.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  addPaymentInstrument(id, body) {
    var _this12 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this12.config.httpClient, `${_this12.config.host}/accounts/entities/${id}/payment-instruments`, _this12.config, _this12.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Fetch all of the payment instruments for a sub-entity. You can filter by status to
   * identify verified instruments that are ready to be used for Payouts.
   *
   * @memberof Platforms
   * @param {string} id The sub-entity's ID.
   * @param {string} status The status of your sub-entity's payment instrument.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  queryPaymentInstruments(id, status) {
    var _this13 = this;
    return _asyncToGenerator(function* () {
      try {
        const url = `${_this13.config.host}/accounts/entities/${id}/payment-instruments${status ? `?status=${status}` : ''}`;
        const response = yield (0, _http.get)(_this13.config.httpClient, url, _this13.config, _this13.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * You can schedule when your sub-entities receive their funds using our Platforms solution.
   * Use this endpoint to retrieve information about a sub-entity's schedule.
   *
   * @memberof Platforms
   * @param {string} id The sub-entity's ID.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  retrieveSubEntityPayoutSchedule(id) {
    var _this14 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this14.config.httpClient, `${_this14.config.host}/accounts/entities/${id}/payout-schedules`, _this14.config, _this14.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * You can schedule when your sub-entities receive their funds using our Platforms solution.
   * Use this endpoint to update a sub-entity's schedule.
   *
   * @memberof Platforms
   * @param {string} id The sub-entity's ID.
   * @param {Object} body Platforms request body.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  updateSubEntityPayoutSchedule(id, body) {
    var _this15 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.put)(_this15.config.httpClient, `${_this15.config.host}/accounts/entities/${id}/payout-schedules`, _this15.config, _this15.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Retrieve the details of a specific reserve rule.
   *
   * @memberof Platforms
   * @param {string} entityId The sub-entity's ID.
   * @param {string} id The reserve rule ID.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  getReserveRuleDetails(entityId, id) {
    var _this16 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this16.config.httpClient, `${_this16.config.host}/accounts/entities/${entityId}/reserve-rules/${id}`, _this16.config, _this16.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Update an upcoming reserve rule. Only reserve rules that have never been active can be updated.
   *
   * @memberof Platforms
   * @param {string} entityId The sub-entity's ID.
   * @param {string} id The reserve rule ID.
   * @param {Object} body The body to be sent.
   * @param {string} ifMatch Identifies a specific version of a reserve rule to update. Example: Y3Y9MCZydj0w
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  updateReserveRule(entityId, id, body, ifMatch) {
    var _this17 = this;
    return _asyncToGenerator(function* () {
      try {
        const config = _objectSpread(_objectSpread({}, _this17.config), {}, {
          headers: _objectSpread(_objectSpread({}, _this17.config.headers), {}, {
            'If-Match': ifMatch
          })
        });
        const response = yield (0, _http.put)(_this17.config.httpClient, `${_this17.config.host}/accounts/entities/${entityId}/reserve-rules/${id}`, config, _this17.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Create a sub-entity reserve rule.
   *
   * @memberof Platforms
   * @param {string} id The sub-entity's ID.
   * @param {Object} body The body of the reserve rule to be added.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  addReserveRule(id, body) {
    var _this18 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this18.config.httpClient, `${_this18.config.host}/accounts/entities/${id}/reserve-rules`, _this18.config, _this18.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Fetch all of the reserve rules for a sub-entity.
   *
   * @memberof Platforms
   * @param {string} id The sub-entity's ID.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  queryReserveRules(id) {
    var _this19 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this19.config.httpClient, `${_this19.config.host}/accounts/entities/${id}/reserve-rules`, _this19.config, _this19.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }
}
exports.default = Platforms;
//# sourceMappingURL=platforms.js.map