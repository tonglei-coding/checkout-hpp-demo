"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _errors = require("../../services/errors");
var _http = require("../../services/http");
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Class dealing with the /workflows endpoint
 *
 * @export
 * @class Workflows
 */
class Workflows {
  constructor(config) {
    this.config = config;
  }

  /**
   * Get all workflows
   *
   * @memberof Workflows
   * @return {Promise<Object>} A promise to the workflows response.
   */
  getAll() {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this.config.httpClient, `${_this.config.host}/workflows`, _this.config, _this.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Add a new Flow workflow.
   *
   * @memberof Workflows
   * @param {Object} body Workflows request body.
   * @return {Promise<Object>} A promise to the workflows response.
   */
  add(body) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this2.config.httpClient, `${_this2.config.host}/workflows`, _this2.config, _this2.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Get the details of a workflow.
   *
   * @memberof Workflows
   * @param {string} id Workflow id.
   * @return {Promise<Object>} A promise to the workflows response.
   */
  get(id) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this3.config.httpClient, `${_this3.config.host}/workflows/${id}`, _this3.config, _this3.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Removes a workflow so it is no longer being executed.
   * Actions of already executed workflows will be still processed.
   *
   * @memberof Workflows
   * @param {string} id Workflow id.
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  remove(id) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http._delete)(_this4.config.httpClient, `${_this4.config.host}/workflows/${id}`, _this4.config, _this4.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Patch a workflow.
   *
   * @memberof Workflows
   * @param {string} id Workflow id.
   * @param {Object} body Workflows request body.
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  patch(id, body) {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.patch)(_this5.config.httpClient, `${_this5.config.host}/workflows/${id}`, _this5.config, _this5.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Adds a workflow action. Actions determine what the workflow will do when it is triggered.
   *
   * @memberof Workflows
   * @param {string} id Workflow Id.
   * @param {Object} body Workflows request body.
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  addAction(id, body) {
    var _this6 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this6.config.httpClient, `${_this6.config.host}/workflows/${id}/actions/`, _this6.config, _this6.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Update a workflow action.
   *
   * @memberof Workflows
   * @param {string} workflowId Workflow ID.
   * @param {string} workflowActionId Workflow action ID.
   * @param {Object} body Workflows request body.
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  updateAction(workflowId, workflowActionId, body) {
    var _this7 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.put)(_this7.config.httpClient, `${_this7.config.host}/workflows/${workflowId}/actions/${workflowActionId}`, _this7.config, _this7.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Removes a workflow action. Actions determine what the workflow will do when it is triggered.
   *
   * @memberof Workflows
   * @param {string} workflowId Workflow id.
   * @param {string} workflowActionId Workflow action Id.
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  removeAction(workflowId, workflowActionId) {
    var _this8 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http._delete)(_this8.config.httpClient, `${_this8.config.host}/workflows/${workflowId}/actions/${workflowActionId}`, _this8.config, _this8.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Adds a workflow condition. Conditions determine when the workflow will trigger.
   *
   * @memberof Workflows
   * @param {string} id Workflow Id.
   * @param {Object} body Workflows request body.
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  addCondition(id, body) {
    var _this9 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this9.config.httpClient, `${_this9.config.host}/workflows/${id}/conditions/`, _this9.config, _this9.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Update a workflow condition.
   *
   * @memberof Workflows
   * @param {string} workflowId Workflow ID.
   * @param {string} workflowConditionId Workflow condition ID.
   * @param {Object} body Workflows request body.
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  updateCondition(workflowId, workflowConditionId, body) {
    var _this10 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.put)(_this10.config.httpClient, `${_this10.config.host}/workflows/${workflowId}/conditions/${workflowConditionId}`, _this10.config, _this10.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Removes a workflow condition. Conditions determine when the workflow will trigger.
   *
   * @memberof Workflows
   * @param {string} workflowId Workflow id.
   * @param {string} workflowConditionId Workflow condition Id.
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  removeCondition(workflowId, workflowConditionId) {
    var _this11 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http._delete)(_this11.config.httpClient, `${_this11.config.host}/workflows/${workflowId}/conditions/${workflowConditionId}`, _this11.config, _this11.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Validate a workflow in our Sandbox environment.
   *
   * @memberof Workflows
   * @param {string} id Workflow id.
   * @param {Object} body Event types for which the workflow will execute.
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  test(id, body) {
    var _this12 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this12.config.httpClient, `${_this12.config.host}/workflows/${id}/test`, _this12.config, _this12.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Get a list of sources and their events for building new workflows
   *
   * @memberof Workflows
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  getEventTypes() {
    var _this13 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this13.config.httpClient, `${_this13.config.host}/workflows/event-types`, _this13.config, _this13.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Get the details of an event.
   *
   * @memberof Workflows
   * @param {string} id Event ID.
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  getEvent(id) {
    var _this14 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this14.config.httpClient, `${_this14.config.host}/workflows/events/${id}`, _this14.config, _this14.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Get the details of a workflow action executed for the specified event.
   *
   * @memberof Workflows
   * @param {string} eventId Event ID.
   * @param {string} workflowActionId Workflow Action ID.
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  getActionInvocations(eventId, workflowActionId) {
    var _this15 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this15.config.httpClient, `${_this15.config.host}/workflows/events/${eventId}/actions/${workflowActionId}`, _this15.config, _this15.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Reflows a past event denoted by the event ID and triggers the actions of any
   * workflows with matching conditions.
   *
   * @memberof Workflows
   * @param {string} id Event ID.
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  reflowByEvent(id) {
    var _this16 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this16.config.httpClient, `${_this16.config.host}/workflows/events/${id}/reflow`, _this16.config, _this16.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Reflows a past event by event ID and workflow ID. Triggers all the actions of a
   * specific event and workflow combination if the event denoted by the event ID matches
   * the workflow conditions.
   *
   * @memberof Workflows
   * @param {string} eventId Event ID.
   * @param {string} workflowId Workflow ID.
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  reflowByEventAndWorkflow(eventId, workflowId) {
    var _this17 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this17.config.httpClient, `${_this17.config.host}/workflows/events/${eventId}/workflow/${workflowId}/reflow`, _this17.config, _this17.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Reflow past events attached to multiple event IDs and workflow IDs. If you don't
   * specify any workflow IDs, all matching workflows will be retriggered.
   *
   * @memberof Workflows
   * @param {Array} events Array of IDs for the events you want reflowed.
   * @param {Array} [workflows] Array of IDs for the workflows whose actions you want to retrigger.
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  reflowEventsByEventAndWorkflowIds(events, workflows) {
    var _this18 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this18.config.httpClient, `${_this18.config.host}/workflows/events/reflow`, _this18.config, _this18.config.sk, {
          events,
          workflows
        });
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Reflow past events attached to multiple subject IDs and workflow IDs. If you don't
   * specify any workflow IDs, all matching workflows will be retriggered.
   *
   * @memberof Workflows
   * @param {Array} subjects Array of IDs for the subjects you want reflowed.
   * @param {Array} [workflows] Array of IDs for the workflows whose actions you want to retrigger.
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  reflowEventsBySubjectAndWorkflowIds(subjects, workflows) {
    var _this19 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this19.config.httpClient, `${_this19.config.host}/workflows/events/reflow`, _this19.config, _this19.config.sk, {
          subjects,
          workflows
        });
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Get all events that relate to a specific subject
   *
   * @memberof Workflows
   * @param {string} id The event identifier.
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  getSubjectEvents(id) {
    var _this20 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this20.config.httpClient, `${_this20.config.host}/workflows/events/subject/${id}`, _this20.config, _this20.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Reflows the events associated with a subject ID (for example, a payment ID or a
   * dispute ID) and triggers the actions of any workflows with matching conditions.
   *
   * @memberof Workflows
   * @param {string} id The subject identifier (for example, a payment ID or a dispute ID).
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  reflowBySubject(id) {
    var _this21 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this21.config.httpClient, `${_this21.config.host}/workflows/events/subject/${id}/reflow`, _this21.config, _this21.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Reflows the events associated with a subject ID (for example, a payment ID or a
   * dispute ID) and triggers the actions of the specified workflow if the conditions match.
   *
   * @memberof Workflows
   * @param {string} subjectId Subject ID.
   * @param {string} workflowId Workflow ID.
   * @return {Promise<Object>} A promise to the Workflows response.
   */
  reflowBySubjectAndWorkflow(subjectId, workflowId) {
    var _this22 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this22.config.httpClient, `${_this22.config.host}/workflows/events/subject/${subjectId}/workflow/${workflowId}/reflow`, _this22.config, _this22.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }
}
exports.default = Workflows;
//# sourceMappingURL=workflows.js.map