"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _http = require("../../services/http");
var _errors = require("../../services/errors");
var _utils = require("../../services/utils");
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
class Issuing {
  constructor(config) {
    this.config = config;
  }

  /**
   * Create a new cardholder that you can issue a card to at a later point.
   *
   * @memberof Issuing
   * @param {Object} body Cardholder params.
   * @return {Promise<Object>} A promise to the cardholder response.
   */
  createCardholder(body) {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this.config.httpClient, `${_this.config.host}/issuing/cardholders`, _this.config, _this.config.sk, body);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Retrieve the details for a cardholder you created previously.
   *
   * @memberof Issuing
   * @param {string} id Cardholder id.
   * @return {Promise<Object>} A promise to the cardholder details response.
   */
  getCardholder(id) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this2.config.httpClient, `${_this2.config.host}/issuing/cardholders/${id}`, _this2.config, _this2.config.sk);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Retrieves the cards issued to the specified cardholder.
   *
   * @memberof Issuing
   * @param {string} id Cardholder id.
   * @return {Promise<Object>} A promise to the cardholder details response.
   */
  getCardholderCards(id) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this3.config.httpClient, `${_this3.config.host}/issuing/cardholders/${id}/cards`, _this3.config, _this3.config.sk);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Creates a physical or virtual card and issues it to the specified cardholder.
   *
   * @memberof Issuing
   * @param {Object} body Card params.
   * @return {Promise<Object>} A promise to the card response.
   */
  createCard(body) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this4.config.httpClient, `${_this4.config.host}/issuing/cards`, _this4.config, _this4.config.sk, body);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Retrieves the details for a card you issued previously.
   *
   * @memberof Issuing
   * @param {string} id Card id.
   * @return {Promise<Object>} A promise to the card details response.
   */
  getCardDetails(id) {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this5.config.httpClient, `${_this5.config.host}/issuing/cards/${id}`, _this5.config, _this5.config.sk);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Enrolls a card in 3D Secure (3DS).
   *
   * @memberof Issuing
   * @param {string} id Card id.
   * @param {Object} body 3DS enrollment params.
   * @return {Promise<Object>} A promise to the card response.
   */
  enrollThreeDS(id, body) {
    var _this6 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this6.config.httpClient, `${_this6.config.host}/issuing/cards/${id}/3ds-enrollment`, _this6.config, _this6.config.sk, body);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Updates a card's 3DS enrollment details.
   *
   * @memberof Issuing
   * @param {string} id Card id.
   * @param {Object} body 3DS enrollment params.
   * @return {Promise<Object>} A promise to the card response.
   */
  updateThreeDS(id, body) {
    var _this7 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.patch)(_this7.config.httpClient, `${_this7.config.host}/issuing/cards/${id}/3ds-enrollment`, _this7.config, _this7.config.sk, body);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Retrieves the details for a card you issued previously.
   *
   * @memberof Issuing
   * @param {string} id Card id.
   * @return {Promise<Object>} A promise to the card response.
   */
  getThreeDSDetails(id) {
    var _this8 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this8.config.httpClient, `${_this8.config.host}/issuing/cards/${id}/3ds-enrollment`, _this8.config, _this8.config.sk);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Activates an inactive or suspended card so that incoming authorizations can be approved.
   *
   * @memberof Issuing
   * @param {string} id Card id.
   * @return {Promise<Object>} A promise to the card response.
   */
  activateCard(id) {
    var _this9 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this9.config.httpClient, `${_this9.config.host}/issuing/cards/${id}/activate`, _this9.config, _this9.config.sk);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Retrieves the credentials for a card you issued previously.
   *
   * @memberof Issuing
   * @param {string} id Card id.
   * @param {Object} body Card params.
   * @return {Promise<Object>} A promise to the card response.
   */
  getCardCredentials(id, body) {
    var _this10 = this;
    return _asyncToGenerator(function* () {
      try {
        const url = (0, _utils.buildQueryParams)(`${_this10.config.host}/issuing/cards/${id}/credentials`, body);
        const response = yield (0, _http.get)(_this10.config.httpClient, url, _this10.config, _this10.config.sk);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Revokes an inactive, active, or suspended card to permanently decline all incoming authorizations.
   *
   * @memberof Issuing
   * @param {string} id Card id.
   * @param {Object} body Card params.
   * @return {Promise<Object>} A promise to the card response.
   */
  revokeCard(id, body) {
    var _this11 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this11.config.httpClient, `${_this11.config.host}/issuing/cards/${id}/revoke`, _this11.config, _this11.config.sk, body);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Suspends an active or inactive card to temporarily decline all incoming authorizations.
   *
   * @memberof Issuing
   * @param {string} id Card id.
   * @param {Object} body Card params.
   * @return {Promise<Object>} A promise to the card response.
   */
  suspendCard(id, body) {
    var _this12 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this12.config.httpClient, `${_this12.config.host}/issuing/cards/${id}/suspend`, _this12.config, _this12.config.sk, body);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Creates a card control and applies it to the specified card.
   *
   * @memberof Issuing
   * @param {Object} body Card control params.
   * @return {Promise<Object>} A promise to the card response.
   */
  createCardControl(body) {
    var _this13 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this13.config.httpClient, `${_this13.config.host}/issuing/controls`, _this13.config, _this13.config.sk, body);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Retrieves a list of spending controls applied to the specified card.
   *
   * @memberof Issuing
   * @param {Object} params Card control params.
   * @return {Promise<Object>} A promise to the card response.
   */
  getCardControls(params) {
    var _this14 = this;
    return _asyncToGenerator(function* () {
      try {
        const url = (0, _utils.buildQueryParams)(`${_this14.config.host}/issuing/controls`, params);
        const response = yield (0, _http.get)(_this14.config.httpClient, url, _this14.config, _this14.config.sk);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Retrieves the details of a card control you created previously.
   *
   * @memberof Issuing
   * @param {string} id Card control id.
   * @return {Promise<Object>} A promise to the card response.
   */
  getCardControlDetails(id) {
    var _this15 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this15.config.httpClient, `${_this15.config.host}/issuing/controls/${id}`, _this15.config, _this15.config.sk);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Updates an existing card control.
   *
   * @memberof Issuing
   * @param {string} id Card control id.
   * @param {Object} body Card control params.
   * @return {Promise<Object>} A promise to the card response.
   */
  updateCardControl(id, body) {
    var _this16 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.put)(_this16.config.httpClient, `${_this16.config.host}/issuing/controls/${id}`, _this16.config, _this16.config.sk, body);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Removes an existing card control from the card it was applied to.
   *
   * @memberof Issuing
   * @param {string} id Card control id.
   * @return {Promise<Object>} A promise to the card response.
   */
  deleteCardControl(id) {
    var _this17 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http._delete)(_this17.config.httpClient, `${_this17.config.host}/issuing/controls/${id}`, _this17.config, _this17.config.sk);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Simulate an authorization request with a card you issued previously.
   *
   * @memberof Issuing
   * @param {Object} body Card params.
   * @return {Promise<Object>} A promise to the card response.
   */
  simulateAuthorization(body) {
    var _this18 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this18.config.httpClient, `${_this18.config.host}/issuing/simulate/authorizations`, _this18.config, _this18.config.sk, body);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Simulate an incremental authorization request for an existing approved transaction.
   *
   * @memberof Issuing
   * @param {String} id transaction ID.
   * @param {Object} body Amount.
   * @return {Promise<Object>} A promise to the simulation response.
   */
  simulateIncrement(id, body) {
    var _this19 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this19.config.httpClient, `${_this19.config.host}/issuing/simulate/authorizations/${id}/authorizations`, _this19.config, _this19.config.sk, body);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Simulate the clearing of an existing approved authorization.
   *
   * @memberof Issuing
   * @param {String} id transaction ID.
   * @param {Object} body Amount.
   * @return {Promise<Object>} A promise to the simulation response.
   */
  simulateClearing(id, body) {
    var _this20 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this20.config.httpClient, `${_this20.config.host}/issuing/simulate/authorizations/${id}/presentments`, _this20.config, _this20.config.sk, body);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }

  /**
   * Simulate the reversal of an existing approved authorization.
   *
   * @memberof Issuing
   * @param {String} id transaction ID.
   * @param {Object} body Amount.
   * @return {Promise<Object>} A promise to the simulation response.
   */
  simulateReversal(id, body) {
    var _this21 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this21.config.httpClient, `${_this21.config.host}/issuing/simulate/authorizations/${id}/reversals`, _this21.config, _this21.config.sk, body);
        return yield response.json;
      } catch (err) {
        throw yield (0, _errors.determineError)(err);
      }
    })();
  }
}
exports.default = Issuing;
//# sourceMappingURL=issuing.js.map