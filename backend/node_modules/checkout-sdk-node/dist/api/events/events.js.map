{"version":3,"file":"events.js","names":["_errors","require","_http","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","Events","constructor","config","retrieveEventTypes","version","_this","url","host","response","get","httpClient","sk","json","err","error","determineError","retrieveEvents","body","_this2","queryString","Object","keys","map","key","join","retrieveEvent","eventId","_this3","retrieveEventNotification","_this4","notificationId","retry","_this5","post","webhookId","retryAll","_this6","exports","default"],"sources":["../../../src/api/events/events.js"],"sourcesContent":["import { determineError } from '../../services/errors';\r\nimport { get, post } from '../../services/http';\r\n\r\n/**\r\n * Class dealing with the /events endpoint\r\n *\r\n * @export\r\n * @class Events\r\n */\r\nexport default class Events {\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n\r\n    /**\r\n     * Retrieve a list of event types grouped by their respective version that you can\r\n     * configure on your webhooks.\r\n     *\r\n     * @memberof Events\r\n     * @param {string} version Events Version.\r\n     * @return {Promise<Object>} A promise to the request events response.\r\n     */\r\n    async retrieveEventTypes(version) {\r\n        try {\r\n            let url = `${this.config.host}/event-types`;\r\n            if (version) {\r\n                url += `?version=${version}`;\r\n            }\r\n            const response = await get(\r\n                this.config.httpClient, \r\n                url, \r\n                this.config, \r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves events ordered by the event date in descending order (latest first).\r\n     * Results can be paged by specifying the skip and limit query parameters.\r\n     *\r\n     * @memberof Events\r\n     * @param {Object} body Events request body.\r\n     * @return {Promise<Object>} A promise to the request events response.\r\n     */\r\n    async retrieveEvents(body) {\r\n        try {\r\n            let url = `${this.config.host}/events`;\r\n\r\n            if (body) {\r\n                const queryString = Object.keys(body)\r\n                    .map((key) => `${key}=${body[key]}`)\r\n                    .join('&');\r\n                url += `?${queryString}`;\r\n            }\r\n\r\n            const response = await get(this.config.httpClient, url, this.config, this.config.sk);\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the event with the specified identifier string. The event data includes the full event\r\n     * details, the schema of which will vary based on the type.\r\n     *\r\n     * @memberof Events\r\n     * @param {string} eventId Event id.\r\n     * @return {Promise<Object>} A promise to the request event response.\r\n     */\r\n    async retrieveEvent(eventId) {\r\n        try {\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                `${this.config.host}/events/${eventId}`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the attempts for a specific event notification\r\n     *\r\n     * @memberof Events\r\n     * @param {Object} body Event request body.\r\n     * @return {Promise<Object>} A promise to the request event notifications response.\r\n     */\r\n    async retrieveEventNotification(body) {\r\n        try {\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                `${this.config.host}/events/${body.eventId}/notifications/${body.notificationId}`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retries a specific webhook notification for the given event\r\n     *\r\n     * @memberof Events\r\n     * @param {Object} body Event request body.\r\n     * @return {Promise<Object>} A promise to the retry event response.\r\n     */\r\n    async retry(body) {\r\n        try {\r\n            const response = await post(\r\n                this.config.httpClient,\r\n                `${this.config.host}/events/${body.eventId}/webhooks/${body.webhookId}/retry`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retries all webhook notifications configured for the specified event\r\n     *\r\n     * @memberof Events\r\n     * @param {string} eventId Event id.\r\n     * @return {Promise<Object>} A promise to the retry events response.\r\n     */\r\n    async retryAll(eventId) {\r\n        try {\r\n            const response = await post(\r\n                this.config.httpClient,\r\n                `${this.config.host}/events/${eventId}/webhooks/retry`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;;;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,KAAA,GAAAD,OAAA;AAAgD,SAAAE,mBAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,cAAAC,CAAA,GAAAP,CAAA,CAAAK,CAAA,EAAAC,CAAA,GAAAE,CAAA,GAAAD,CAAA,CAAAE,KAAA,WAAAT,CAAA,gBAAAE,CAAA,CAAAF,CAAA,KAAAO,CAAA,CAAAG,IAAA,GAAAT,CAAA,CAAAO,CAAA,IAAAG,OAAA,CAAAC,OAAA,CAAAJ,CAAA,EAAAK,IAAA,CAAAV,CAAA,EAAAC,CAAA;AAAA,SAAAU,kBAAAd,CAAA,6BAAAC,CAAA,SAAAC,CAAA,GAAAa,SAAA,aAAAJ,OAAA,WAAAR,CAAA,EAAAC,CAAA,QAAAC,CAAA,GAAAL,CAAA,CAAAgB,KAAA,CAAAf,CAAA,EAAAC,CAAA,YAAAe,MAAAjB,CAAA,IAAAD,kBAAA,CAAAM,CAAA,EAAAF,CAAA,EAAAC,CAAA,EAAAa,KAAA,EAAAC,MAAA,UAAAlB,CAAA,cAAAkB,OAAAlB,CAAA,IAAAD,kBAAA,CAAAM,CAAA,EAAAF,CAAA,EAAAC,CAAA,EAAAa,KAAA,EAAAC,MAAA,WAAAlB,CAAA,KAAAiB,KAAA;AAEhD;AACA;AACA;AACA;AACA;AACA;AACe,MAAME,MAAM,CAAC;EACxBC,WAAWA,CAACC,MAAM,EAAE;IAChB,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACUC,kBAAkBA,CAACC,OAAO,EAAE;IAAA,IAAAC,KAAA;IAAA,OAAAV,iBAAA;MAC9B,IAAI;QACA,IAAIW,GAAG,GAAG,GAAGD,KAAI,CAACH,MAAM,CAACK,IAAI,cAAc;QAC3C,IAAIH,OAAO,EAAE;UACTE,GAAG,IAAI,YAAYF,OAAO,EAAE;QAChC;QACA,MAAMI,QAAQ,SAAS,IAAAC,SAAG,EACtBJ,KAAI,CAACH,MAAM,CAACQ,UAAU,EACtBJ,GAAG,EACHD,KAAI,CAACH,MAAM,EACXG,KAAI,CAACH,MAAM,CAACS,EAChB,CAAC;QACD,aAAaH,QAAQ,CAACI,IAAI;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV,MAAMC,KAAK,SAAS,IAAAC,sBAAc,EAACF,GAAG,CAAC;QACvC,MAAMC,KAAK;MACf;IAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACUE,cAAcA,CAACC,IAAI,EAAE;IAAA,IAAAC,MAAA;IAAA,OAAAvB,iBAAA;MACvB,IAAI;QACA,IAAIW,GAAG,GAAG,GAAGY,MAAI,CAAChB,MAAM,CAACK,IAAI,SAAS;QAEtC,IAAIU,IAAI,EAAE;UACN,MAAME,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACJ,IAAI,CAAC,CAChCK,GAAG,CAAEC,GAAG,IAAK,GAAGA,GAAG,IAAIN,IAAI,CAACM,GAAG,CAAC,EAAE,CAAC,CACnCC,IAAI,CAAC,GAAG,CAAC;UACdlB,GAAG,IAAI,IAAIa,WAAW,EAAE;QAC5B;QAEA,MAAMX,QAAQ,SAAS,IAAAC,SAAG,EAACS,MAAI,CAAChB,MAAM,CAACQ,UAAU,EAAEJ,GAAG,EAAEY,MAAI,CAAChB,MAAM,EAAEgB,MAAI,CAAChB,MAAM,CAACS,EAAE,CAAC;QACpF,aAAaH,QAAQ,CAACI,IAAI;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV,MAAMC,KAAK,SAAS,IAAAC,sBAAc,EAACF,GAAG,CAAC;QACvC,MAAMC,KAAK;MACf;IAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACUW,aAAaA,CAACC,OAAO,EAAE;IAAA,IAAAC,MAAA;IAAA,OAAAhC,iBAAA;MACzB,IAAI;QACA,MAAMa,QAAQ,SAAS,IAAAC,SAAG,EACtBkB,MAAI,CAACzB,MAAM,CAACQ,UAAU,EACtB,GAAGiB,MAAI,CAACzB,MAAM,CAACK,IAAI,WAAWmB,OAAO,EAAE,EACvCC,MAAI,CAACzB,MAAM,EACXyB,MAAI,CAACzB,MAAM,CAACS,EAChB,CAAC;QACD,aAAaH,QAAQ,CAACI,IAAI;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV,MAAMC,KAAK,SAAS,IAAAC,sBAAc,EAACF,GAAG,CAAC;QACvC,MAAMC,KAAK;MACf;IAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACUc,yBAAyBA,CAACX,IAAI,EAAE;IAAA,IAAAY,MAAA;IAAA,OAAAlC,iBAAA;MAClC,IAAI;QACA,MAAMa,QAAQ,SAAS,IAAAC,SAAG,EACtBoB,MAAI,CAAC3B,MAAM,CAACQ,UAAU,EACtB,GAAGmB,MAAI,CAAC3B,MAAM,CAACK,IAAI,WAAWU,IAAI,CAACS,OAAO,kBAAkBT,IAAI,CAACa,cAAc,EAAE,EACjFD,MAAI,CAAC3B,MAAM,EACX2B,MAAI,CAAC3B,MAAM,CAACS,EAChB,CAAC;QACD,aAAaH,QAAQ,CAACI,IAAI;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV,MAAMC,KAAK,SAAS,IAAAC,sBAAc,EAACF,GAAG,CAAC;QACvC,MAAMC,KAAK;MACf;IAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACUiB,KAAKA,CAACd,IAAI,EAAE;IAAA,IAAAe,MAAA;IAAA,OAAArC,iBAAA;MACd,IAAI;QACA,MAAMa,QAAQ,SAAS,IAAAyB,UAAI,EACvBD,MAAI,CAAC9B,MAAM,CAACQ,UAAU,EACtB,GAAGsB,MAAI,CAAC9B,MAAM,CAACK,IAAI,WAAWU,IAAI,CAACS,OAAO,aAAaT,IAAI,CAACiB,SAAS,QAAQ,EAC7EF,MAAI,CAAC9B,MAAM,EACX8B,MAAI,CAAC9B,MAAM,CAACS,EAChB,CAAC;QACD,aAAaH,QAAQ,CAACI,IAAI;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV,MAAMC,KAAK,SAAS,IAAAC,sBAAc,EAACF,GAAG,CAAC;QACvC,MAAMC,KAAK;MACf;IAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACUqB,QAAQA,CAACT,OAAO,EAAE;IAAA,IAAAU,MAAA;IAAA,OAAAzC,iBAAA;MACpB,IAAI;QACA,MAAMa,QAAQ,SAAS,IAAAyB,UAAI,EACvBG,MAAI,CAAClC,MAAM,CAACQ,UAAU,EACtB,GAAG0B,MAAI,CAAClC,MAAM,CAACK,IAAI,WAAWmB,OAAO,iBAAiB,EACtDU,MAAI,CAAClC,MAAM,EACXkC,MAAI,CAAClC,MAAM,CAACS,EAChB,CAAC;QACD,aAAaH,QAAQ,CAACI,IAAI;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV,MAAMC,KAAK,SAAS,IAAAC,sBAAc,EAACF,GAAG,CAAC;QACvC,MAAMC,KAAK;MACf;IAAC;EACL;AACJ;AAACuB,OAAA,CAAAC,OAAA,GAAAtC,MAAA","ignoreList":[]}