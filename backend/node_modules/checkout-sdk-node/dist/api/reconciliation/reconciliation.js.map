{"version":3,"file":"reconciliation.js","names":["_errors","require","_http","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","asyncGeneratorStep","n","a","c","u","done","Promise","resolve","then","_asyncToGenerator","_next","_throw","Reconciliation","constructor","config","getPayments","body","_this","url","host","queryString","map","key","join","response","get","httpClient","sk","res","json","_links","next","nextLink","href","page","match","err","error","determineError","getPayment","paymentId","_this2","getPaymentsCsv","_this3","csv","getStatements","_this4","getStatementCsv","statementId","_this5","getPaymentsActions","_this6","getPaymentsAction","actionsId","_this7","getPaymentsActionsCsv","_this8","getAction","actionId","_this9","exports","default"],"sources":["../../../src/api/reconciliation/reconciliation.js"],"sourcesContent":["import { determineError } from '../../services/errors';\r\nimport { get } from '../../services/http';\r\n\r\n/**\r\n * Class dealing with the /reporting endpoint\r\n *\r\n * @export\r\n * @class Reconciliation\r\n */\r\nexport default class Reconciliation {\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n\r\n    /**\r\n     * Returns a JSON report containing all payments within your specified parameters\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {Object} body Reconciliation request body.\r\n     * @return {Promise<Object>} A promise to the request reconciliation response.\r\n     */\r\n    async getPayments(body) {\r\n        try {\r\n            let url = `${this.config.host}/reporting/payments`;\r\n\r\n            if (body) {\r\n                const queryString = Object.keys(body)\r\n                    .map((key) => `${key}=${body[key]}`)\r\n                    .join('&');\r\n                url += `?${queryString}`;\r\n            }\r\n\r\n            const response = await get(\r\n                this.config.httpClient, \r\n                url, \r\n                this.config, \r\n                this.config.sk\r\n            );\r\n            const res = await response.json;\r\n\r\n            // In case there is a \"next\" page, inject it in the response body\r\n            if (res._links && res._links.next) {\r\n                const nextLink = res._links.next.href;\r\n                return await { ...res, page: nextLink.match(/after=([^&]*)/)[1] };\r\n            }\r\n            return await res;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a JSON payment report containing all of the data related to a specific payment,\r\n     * based on the payment's identifier.\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {string} paymentId Payment id.\r\n     * @return {Promise<Object>} A promise to the request reconciliation response.\r\n     */\r\n    async getPayment(paymentId) {\r\n        try {\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                `${this.config.host}/reporting/payments/${paymentId}`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a JSON report containing all payments within your specified parameters\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {Object} body Reconciliation request body.\r\n     * @return {Promise<Buffer>} A promise to the request reconciliation response.\r\n     */\r\n    async getPaymentsCsv(body) {\r\n        try {\r\n            let url = `${this.config.host}/reporting/payments/download`;\r\n\r\n            if (body) {\r\n                const queryString = Object.keys(body)\r\n                    .map((key) => `${key}=${body[key]}`)\r\n                    .join('&');\r\n                url += `?${queryString}`;\r\n            }\r\n            const response = await get(\r\n                this.config.httpClient, \r\n                url, \r\n                { ...this.config, csv: true }, \r\n                this.config.sk\r\n            );\r\n            return await response.csv;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a JSON report containing all statements within your specified parameters.\r\n     * Please note that the timezone for the request will be UTC.\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {Object} body Reconciliation request body.\r\n     * @return {Promise<Object>} A promise to the request reconciliation response.\r\n     */\r\n    async getStatements(body) {\r\n        try {\r\n            let url = `${this.config.host}/reporting/statements`;\r\n\r\n            if (body) {\r\n                const queryString = Object.keys(body)\r\n                    .map((key) => `${key}=${body[key]}`)\r\n                    .join('&');\r\n                url += `?${queryString}`;\r\n            }\r\n            const response = await get(\r\n                this.config.httpClient, \r\n                url, \r\n                this.config, \r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Downloads a CSV statement report containing all of the data related to a specific\r\n     * statement, based on the statement's identifier.\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {string} statementId Statement id.\r\n     * @return {Promise<Buffer>} A promise to the request reconciliation response.\r\n     */\r\n    async getStatementCsv(statementId) {\r\n        try {\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                `${this.config.host}/reporting/statements/${statementId}/payments/download`,\r\n                { ...this.config, csv: true },\r\n                this.config.sk\r\n            );\r\n            return await response.csv;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all associated payment actions that impact your balance within the parameters you specify\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {Object} body Reconciliation request body.\r\n     * @return {Promise<Object>} A promise to the request reconciliation response.\r\n     */\r\n    async getPaymentsActions(body) {\r\n        try {\r\n            let url = `${this.config.host}/reporting/actions`;\r\n\r\n            if (body) {\r\n                const queryString = Object.keys(body)\r\n                    .map((key) => `${key}=${body[key]}`)\r\n                    .join('&');\r\n                url += `?${queryString}`;\r\n            }\r\n\r\n            const response = await get(\r\n                this.config.httpClient, \r\n                url, \r\n                this.config, \r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the reconciliation data of the payment action\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {string} actionsId Action id.\r\n     * @return {Promise<Object>} A promise to the request reconciliation response.\r\n     */\r\n    async getPaymentsAction(actionsId) {\r\n        try {\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                `${this.config.host}/reporting/payments/actions/${actionsId}`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a CSV report containing all payments within your specified parameters\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {Object} body Reconciliation request body.\r\n     * @return {Promise<Buffer>} A promise to the request reconciliation response.\r\n     */\r\n    async getPaymentsActionsCsv(body) {\r\n        try {\r\n            let url = `${this.config.host}/reporting/actions/download`;\r\n\r\n            if (body) {\r\n                const queryString = Object.keys(body)\r\n                    .map((key) => `${key}=${body[key]}`)\r\n                    .join('&');\r\n                url += `?${queryString}`;\r\n            }\r\n            const response = await get(this.config.httpClient, url, { ...this.config, csv: true }, this.config.sk);\r\n            return await response.csv;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the reconciliation data of a payment action\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {string} actionId Action id.\r\n     * @return {Promise<Object>} A promise to the request reconciliation response.\r\n     */\r\n    async getAction(actionId) {\r\n        try {\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                `${this.config.host}/reporting/actions/${actionId}`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]}