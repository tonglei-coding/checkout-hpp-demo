"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _errors = require("../../services/errors");
var _http = require("../../services/http");
var _validation = require("../../services/validation");
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Class dealing with the /instruments endpoint
 *
 * @export
 * @class Instruments
 */
class Instruments {
  constructor(config) {
    this.config = config;
  }

  /**
   * Exchange a single use Checkout.com token for a payment instrument reference,
   * that can be used at any time to request one or more payments.
   *
   * @memberof Instruments
   * @param {Object} body Instruments request body.
   * @return {Promise<Object>} A promise to the request instruments response.
   */
  create(body) {
    var _this = this;
    return _asyncToGenerator(function* () {
      (0, _validation.setInstrumentType)(body);
      try {
        const response = yield (0, _http.post)(_this.config.httpClient, `${_this.config.host}/instruments`, _this.config, _this.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Returns details of an instrument
   *
   * @memberof Instruments
   * @param {string} id Instrument id.
   * @return {Promise<Object>} A promise to the instrument response.
   */
  get(id) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this2.config.httpClient, `${_this2.config.host}/instruments/${id}`, _this2.config, _this2.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Update details of an instrument
   *
   * @memberof Instruments
   * @param {string} id Instrument id.
   * @param {Object} body Instruments request body.
   * @return {Promise<Object>} A promise to the instrument response.
   */
  update(id, body) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.patch)(_this3.config.httpClient, `${_this3.config.host}/instruments/${id}`, _this3.config, _this3.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Delete a payment instrument.
   *
   * @memberof Instruments
   * @param {string} id Instrument id.
   * @return {Promise<Object>} A promise to the instrument response.
   */
  delete(id) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http._delete)(_this4.config.httpClient, `${_this4.config.host}/instruments/${id}`, _this4.config, _this4.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Delete a payment instrument.
   *
   * @memberof Instruments
   * @param {string} country Country 2 character ISO.
   * @param {string} currency Currency 3 character ISO.
   * @return {Promise<Object>} A promise to the instrument response.
   */
  getBankAccountFieldFormatting(country, currency) {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this5.config.httpClient, `${_this5.config.host}/validation/bank-accounts/${country}/${currency}`, _this5.config, _this5.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }
}
exports.default = Instruments;
//# sourceMappingURL=instruments.js.map