"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _errors = require("../../services/errors");
var _http = require("../../services/http");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Class dealing with the /sessions endpoint
 *
 * @export
 * @class Sessions
 */
class Sessions {
  constructor(config) {
    this.config = config;
  }

  /**
   * Create a payment session to authenticate a cardholder before requesting a payment.
   *
   * @memberof Sessions
   * @param {Object} body Sessions request body.
   * @return {Promise<Object>} A promise to the sessions response.
   */
  request(body) {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this.config.httpClient, `${_this.config.host}/sessions`, _this.config, _this.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Returns the details of the session with the specified identifier string.
   *
   * @memberof Sessions
   * @param {string} id Sessions id.
   * @param {string} channel Type of channnel.
   * @return {Promise<Object>} A promise to the sessions response.
   */
  get(id, channel) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        _this2.config.headers = _objectSpread(_objectSpread({}, _this2.config.headers), {}, {
          channel
        });
        const response = yield (0, _http.get)(_this2.config.httpClient, `${_this2.config.host}/sessions/${id}`, _this2.config, _this2.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Update a session by providing information about the environment.
   *
   * @memberof Sessions
   * @param {string} id Sessions id.
   * @param {Object} body Sessions request body.
   * @return {Promise<Object>} A promise to the sessions response.
   */
  update(id, body) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.put)(_this3.config.httpClient, `${_this3.config.host}/sessions/${id}/collect-data`, _this3.config, _this3.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Completes a session by posting the the following request to the callback URL
   * (only relevant for non hosted sessions)
   *
   * @memberof Sessions
   * @param {string} id Sessions id.
   * @return {Promise<Object>} A promise to the sessions response.
   */
  complete(id) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this4.config.httpClient, `${_this4.config.host}/sessions/${id}/complete`, _this4.config, _this4.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Completes a session by posting the the following request to the callback URL
   * (only relevant for non hosted sessions)
   *
   * @memberof Sessions
   * @param {string} id Sessions id.
   * @param {string} threeDsMethodCompletion 3DS Method completion indicator
   * @return {Promise<Object>} A promise to the sessions response.
   */
  update3DSMethodCompletionIndicator(id, threeDsMethodCompletion) {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      try {
        const body = {
          three_ds_method_completion: threeDsMethodCompletion
        };
        const response = yield (0, _http.put)(_this5.config.httpClient, `${_this5.config.host}/sessions/${id}/issuer-fingerprint`, _this5.config, _this5.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }
}
exports.default = Sessions;
//# sourceMappingURL=sessions.js.map